package UI;

import java.awt.Color;
import java.awt.Font;
import java.util.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import connectDB.ConnectDB;
import dao.GiaoVien_DAO;
import dao.LopHoc_DAO;
import entity.GiaoVien;
import entity.LopHoc;







public class FrmLopHoc extends JFrame  implements ActionListener,MouseListener{
	private static final long serialVersionUID = 1L;
	
	private JTextField txtMaLop ;
	private JTextField txtTenLop;
	private JTextField txtSiSo;
	private JComboBox cboGVCN;
	private DefaultComboBoxModel<String> mdcbo;	
	private JButton btnThem;
	private JButton btnLuu;
	private JButton btnSua;
	private JButton btnXoa;
	private JButton btnTimGV,btnTimLop;
	private DefaultTableModel dataModel;
	private JTable table;
	
	private GiaoVien_DAO gvD;
	private LopHoc_DAO lhD;
	private ArrayList<LopHoc> listLH;
	
	public FrmLopHoc() {
		try {
			ConnectDB.getInstance().connect();
			gvD = new GiaoVien_DAO();
			lhD = new LopHoc_DAO();
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		setTitle("Thông tin lớp h�?c");
		setSize(1000, 600);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);

		Box b, b1, b2, b3, b4, b44, b5, b6, b7;
		//Dùng Box layout
		add(b = Box.createVerticalBox()); //Box theo chi�?u d�?c
		b.add(Box.createVerticalStrut(10)); //Tạo khoảng cách theo chi�?u d�?c
		b.add(b1 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(10)); //b1 -> b7: Box theo chi�?u ngang
		b.add(b2 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(10)); 
		b.add(b3 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(10)); 
		b.add(b4 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(10)); 
		b.add(b44 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(10)); 
		b.add(b5 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(10)); 
		b.add(b6 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(10)); 
		b.add(b7 = Box.createHorizontalBox()); b.add(Box.createVerticalStrut(10)); 

		JLabel lblTieuDe, lblMaLop, lblTenLop, lblGVCN, lblSiSo;
		b1.add(lblTieuDe = new JLabel("THÔNG TIN LỚP HỌC", JLabel.CENTER));
		lblTieuDe.setFont(new Font("Arial", Font.BOLD, 26));

		b2.add(lblMaLop = new JLabel("Mã lớp: ", JLabel.RIGHT)); b2.add(txtMaLop = new JTextField());
		b3.add(lblTenLop = new JLabel("Tên lớp: ", JLabel.RIGHT)); b3.add(txtTenLop = new JTextField());
		b4.add(lblGVCN = new JLabel("Giáo viên chủ nhiệm: ", JLabel.RIGHT)); 	
		mdcbo = new DefaultComboBoxModel<String>();
		try {
			ArrayList<GiaoVien> PB = gvD.getDSGiaoVien();
			for (GiaoVien it : PB) {
				mdcbo.addElement(it.getMaGV());
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		b4.add(cboGVCN = new JComboBox<String>(mdcbo));
		cboGVCN.setEditable(false);
		b44.add(lblSiSo = new JLabel("Sỉ số : ", JLabel.RIGHT)); b44.add(txtSiSo = new JTextField());
		
		lblMaLop.setPreferredSize(lblGVCN.getPreferredSize());
		lblTenLop.setPreferredSize(lblGVCN.getPreferredSize());
		lblSiSo.setPreferredSize(lblGVCN.getPreferredSize());
		
		b5.add(btnThem = new JButton("Thêm"));
		b5.add(btnLuu= new JButton("Lưu"));
		b5.add(btnSua = new JButton("Sửa"));
		b5.add(btnXoa = new JButton("Xóa"));
		b5.add(btnTimGV = new JButton("Tìm theo mã giáo viên"));
		b5.add(btnTimLop = new JButton("Tìm theo mã lớp"));

		String[] headers = {"Mã lớp", "Tên lớp", "Giáo viên CN", "Sỉ số"};
		dataModel = new DefaultTableModel(headers , 0);
		try {
			addDataToTable();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		JScrollPane scroll;
		b6.add(scroll = new JScrollPane(table = new JTable(dataModel)));
		scroll.setBorder(BorderFactory.createTitledBorder("Danh sách lớp h�?c"));

		b7.add(Box.createHorizontalStrut(600));
		
		
		btnThem.addActionListener(this);
		btnLuu.addActionListener(this);
		btnXoa.addActionListener(this);
		btnSua.addActionListener(this);
		btnTimGV.addActionListener(this);
		btnTimLop.addActionListener(this);
		table.addMouseListener(this);
	
		
		//Khi chương trình chạy, nạp toàn bộ danh sách lớp h�?c lên bảng
	
		
		
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		Object o = e.getSource();
		if(o.equals(btnThem)){
			try {
				atcThem();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		else if(o.equals(btnTimGV)){
			try {
				atcLoc();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		 else if(o.equals(btnSua)){
			 try {
					atcSua();
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		else if(o.equals(btnXoa)){
			int r = table.getSelectedRow();
			if (r == -1) {
				JOptionPane.showMessageDialog(this, "chonj hang");
				return;
			}
			try {
				lhD.xoa(table.getValueAt(r, 0).toString());
			} catch (NumberFormatException | SQLException e2) {
				e2.printStackTrace();
			}
			JOptionPane.showConfirmDialog(this, "chắc chưa");
			dataModel.removeRow(r);
	    }
		else if(o.equals(btnTimLop)){
//			timLop();
		}
		
		
	
 }
	private void atcLoc() throws SQLException {
		// TODO Auto-generated method stub
		removeAllData();
		String maPB = cboGVCN.getSelectedItem().toString();
		ArrayList<LopHoc> locNV = lhD.loc(maPB);
		if(locNV.size() == 0) return;
		for (LopHoc nv : locNV) {
			 Object[] rss =  { nv.getMaLop(),nv.getTenLop(), nv.getgVien().getMaGV() , nv.getSiSo() };
				dataModel.addRow(rss);;
		}
		
	}
	private void atcTim() throws SQLException {
		removeAllData();
		String maLop = txtMaLop.getText();
		ArrayList<LopHoc> locNV = lhD.timNhanVien(maLop);
		if(locNV.size() == 0) return;
		for (LopHoc nv : locNV) {
			 Object[] rss =  { nv.getMaLop(),nv.getTenLop(), nv.getgVien().getMaGV() , nv.getSiSo() };
				dataModel.addRow(rss);;
		}
		
	}
	private void atcSua() throws SQLException {
		String maNV = txtMaLop.getText();
		String ho = txtTenLop.getText();
		GiaoVien pBan = new GiaoVien(cboGVCN.getSelectedItem().toString());
		int tuoi = Integer.parseInt(txtSiSo.getText());
		
		LopHoc nv = new LopHoc(maNV, ho, pBan, tuoi);
		lhD.updateNhanVien(nv);
		
		addDataToTable();
		JOptionPane.showMessageDialog(this, "Sửa Thành Công");
	}
	
	
	private void atcThem() throws SQLException {
		// TODO Auto-generated method stub
		// NhanVien nv = new NhanVien();
		String maNV = txtMaLop.getText();
		String ho = txtTenLop.getText();
		GiaoVien pBan = new GiaoVien(cboGVCN.getSelectedItem().toString());
		int tuoi = Integer.parseInt(txtSiSo.getText());
		
		LopHoc nv = new LopHoc(maNV, ho, pBan, tuoi);
		if (lhD.themNhanVien(nv)) {
			
			dataModel.addRow(new Object[] { nv.getMaLop(),nv.getTenLop(), nv.getgVien().getMaGV() , nv.getSiSo() });
		} else {
			JOptionPane.showMessageDialog(this, "Mã nhân viên đã trùng");
		}
		
	}
	public void addDataToTable() throws SQLException {
		dataModel.setRowCount(0);
		listLH = lhD.getDSNhanVien();
		for (LopHoc nv : listLH) {
			 String[] rss =  { nv.getMaLop(),nv.getTenLop(), nv.getgVien().getMaGV() ,String.valueOf(nv.getSiSo())  };
			dataModel.addRow(rss);
		}
	}

	public void removeAllData() {
		DefaultTableModel df = (DefaultTableModel) table.getModel();
		df.getDataVector().removeAllElements();
	}
	@Override
	public void mouseClicked(MouseEvent e) {
		int row = table.getSelectedRow();
		txtMaLop.setText(dataModel.getValueAt(row, 0).toString());
		txtTenLop.setText(dataModel.getValueAt(row, 1).toString());
		cboGVCN.setSelectedItem(dataModel.getValueAt(row, 2).toString());
		txtSiSo.setText(dataModel.getValueAt(row, 3).toString());
		
		
		
	}
	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	
		
}
